/*
	메모리 주소
	0 ~ 6 : 색상 저장
	10 : 현재키 저장
	20 : 점수
	30, 31, 32 : 시드, 현재블록, 다음블록
	10000번대 : 블록 모양 저장
	20000번대 : 판모양 저장, 20*12 이므로 20000~21911
*/

메모리[55001] -> 1

### 색 저장 (블록 7 종류)
메모리[0] -> 996633
메모리[1] -> 990000
메모리[2] -> 9900
메모리[3] -> 99
메모리[4] -> 999900
메모리[5] -> 990099
메모리[6] -> 9999

### 블록7개 초기화
블록7개초기화()

세로 -> 1
가로 -> 5

### 블록을 랜덤하게 나오게 함
메모리[30] -> 메모리[50000]+메모리[50001] # 시드
메모리[31] -> 새블록() # 현재 블록
메모리[32] -> 새블록() # 다음 블록
종류 -> 메모리[31]

회전 -> 0
낙하속도 -> 20 # 값이 클수록 느려짐

### 벽그리기
횟수 -> 0
횟수 < 20 동안
	사각형(횟수, 0, 999999)
	메모리[20000+(횟수*100)] -> 1
	사각형(횟수, 11, 999999)
	메모리[20000+(횟수*100)+11] -> 1
	횟수 < 11 이면
		사각형(19, 횟수, 999999)
		메모리[20000+(19*100)+횟수] -> 1
	횟수 -> 횟수 + 1
	
메모리[55000] -> 1

### 첫 블록 그리기
블록(종류,회전,세로,가로,메모리[종류])
블록(메모리[32], 0, 2, 15, 메모리[메모리[32]]) # 다음블록 표시
메모리[55000] -> 1
블록(종류,회전,세로,가로,0)

타이머 -> 0
메모리[20] -> 0 # 점수

###################
# 스타트!!!
###################
게임중 -> 1
게임중 동안
	키 -> 입력키() # 위쪽키
	키=50004 이면
		임시 -> 회전
		회전 -> 회전 + 1
		회전=4 이면
			회전 -> 0
		겹친다?(종류,회전,세로,가로) 이면
			회전 -> 임시
			
	키=50006 이면 # 왼쪽키
		임시 -> 가로
		가로 -> 가로 - 1
		겹친다?(종류,회전,세로,가로) 이면
			가로 -> 임시
			
	키=50007 이면 # 오른쪽키
		임시 -> 가로
		가로 -> 가로 + 1
		겹친다?(종류,회전,세로,가로) 이면
			가로 -> 임시
			
	타이머 -> 타이머 + 1
	(타이머=낙하속도) + (키=50005) + (키=50008) 이면
		타이머=낙하속도 이면
			타이머 -> 0
			세로 -> 세로 + 1
		키=50005 이면
			세로 -> 세로 + 1
		키=50008 이면 # 스페이스
			겹친다?(종류,회전,세로,가로)=0 동안
				세로 -> 세로 + 1
			
		(키=50008) + 겹친다?(종류,회전,세로,가로) 이면
			세로 -> 세로 - 1
			블록(종류,회전,세로,가로,메모리[종류])
			메모리[55000] -> 1
			
			### 저장판에 해당 블록 저장
			시작위치 -> 10000+(종류*100)+(회전*10)
			횟수 -> 0
			횟수 < 4 동안
				메모리[20000 + ((세로+메모리[시작위치+(2*횟수)])*100) +
						(가로+메모리[시작위치+(2*횟수+1)])] -> 메모리[종류]
				횟수 -> 횟수 + 1
			
			### 완성된 줄을 지워주고, 판을 다시 그린다
			줄지우기()
				
			### 초기화
			세로 -> 1
			가로 -> 5
			회전 -> 0
			타이머 -> 0
			
			블록(메모리[32], 0, 2, 15, 0)
			메모리[31] -> 메모리[32]
			메모리[32] -> 새블록()
			블록(메모리[32], 0, 2, 15, 메모리[메모리[32]])
			종류 -> 메모리[31]
			
			겹친다?(종류, 회전, 세로, 가로) 이면
				세로위치 -> 0
				세로위치 < 19 동안
					가로위치 -> 1
					가로위치 < 11 동안
						메모리[20000+(세로위치*100)+가로위치] > 0 이면
							사각형(세로위치,가로위치,777777)
						가로위치 -> 가로위치 + 1
					세로위치 -> 세로위치 + 1
				게임중 -> 0
			
	블록(종류,회전,세로,가로,메모리[종류])
	메모리[55000] -> 1
	게임중 != 0 이면
		블록(종류,회전,세로,가로,0)
	
	키=50009 이면
		#게임중 -> 0
		입력키()<50004 동안
			임시 -> 0

###########################
사각형(세로, 가로, 색) 정의
	세로횟수 -> 0
	세로횟수 < 4 동안
		가로횟수 -> 0
		가로횟수 < 4 동안
			메모리[60000 + (세로*500) + (가로*5) + (세로횟수*100) + 가로횟수] -> 색
			가로횟수 -> 가로횟수 + 1
		세로횟수 -> 세로횟수 + 1
	
	(색!=0)*(색!=999999) 이면
		메모리[60000 + (세로*500) + (가로*5) + 101] -> (색*9)/10
		메모리[60000 + (세로*500) + (가로*5) + 102] -> (색*9)/10
		메모리[60000 + (세로*500) + (가로*5) + 201] -> (색*9)/10
		메모리[60000 + (세로*500) + (가로*5) + 202] -> (색*9)/10
		
###########################
입력키() 정의
	출력 -> 0
	
	현재키 -> 0
	키값 -> 50002
	키값 < 50010 동안
		메모리[키값] = 1 이면
			현재키 -> 키값
		키값 -> 키값 + 1
			
	현재키!=메모리[10] 이면
		출력 -> 현재키
		
	메모리[10] -> 현재키
	
######################
메모리8개기억(시작주소, 값0, 값1, 값2, 값3, 값4, 값5, 값6, 값7) 정의
	메모리[시작주소 + 0] -> 값0
	메모리[시작주소 + 1] -> 값1
	메모리[시작주소 + 2] -> 값2
	메모리[시작주소 + 3] -> 값3
	메모리[시작주소 + 4] -> 값4
	메모리[시작주소 + 5] -> 값5
	메모리[시작주소 + 6] -> 값6
	메모리[시작주소 + 7] -> 값7
	
#######################
블록7개초기화() 정의
	# 블록0 : ----
	메모리8개기억(10000,0,0,0,-1,0,1,0,2)
	메모리8개기억(10010,0,0,-1,0,1,0,2,0)
	메모리8개기억(10020,0,0,0,-2,0,-1,0,1)
	메모리8개기억(10030,0,0,-2,0,-1,0,1,0)
	
	# 블록1 : I___
	메모리8개기억(10100,0,0,0,-1,0,1,1,1)
	메모리8개기억(10110,0,0,-1,0,1,0,1,-1)
	메모리8개기억(10120,0,0,-1,-1,0,-1,0,1)
	메모리8개기억(10130,0,0,-1,0,-1,1,1,0)
	
	# 블록2 : ___I
	메모리8개기억(10200,0,0,0,-1,0,1,1,-1)
	메모리8개기억(10210,0,0,-1,-1,-1,0,1,0)
	메모리8개기억(10220,0,0,0,-1,0,1,-1,1)
	메모리8개기억(10230,0,0,-1,0,1,0,1,1)
	
	# 블록3 : ㄱ_
	메모리8개기억(10300,0,0,0,-1,1,0,1,1)
	메모리8개기억(10310,0,0,-1,0,0,-1,1,-1)
	메모리8개기억(10320,0,0,0,-1,1,0,1,1)
	메모리8개기억(10330,0,0,-1,0,0,-1,1,-1)
	
	# 블록4 : _S
	메모리8개기억(10400,0,0,0,1,1,-1,1,0)
	메모리8개기억(10410,0,0,-1,-1,0,-1,1,0)
	메모리8개기억(10420,0,0,0,1,1,-1,1,0)
	메모리8개기억(10430,0,0,-1,-1,0,-1,1,0)
	
	# 블록4 : ㅗ
	메모리8개기억(10500,0,0,-1,0,0,-1,0,1)
	메모리8개기억(10510,0,0,-1,0,0,1,1,0)
	메모리8개기억(10520,0,0,0,-1,0,1,1,0)
	메모리8개기억(10530,0,0,0,-1,-1,0,1,0)
	
	# 블록5 : ㅁ
	메모리8개기억(10600,0,0,0,1,1,0,1,1)
	메모리8개기억(10610,0,0,0,-1,1,-1,1,0)
	메모리8개기억(10620,0,0,-1,-1,-1,0,0,-1)
	메모리8개기억(10630,0,0,-1,0,-1,1,0,1)
	
##############
블록(종류, 회전, 세로, 가로, 색) 정의
	시작위치 -> 10000+(종류*100)+(회전*10)
	횟수 -> 0
	횟수 < 4 동안
		사각형(세로+메모리[시작위치+(2*횟수)], 가로+메모리[시작위치+(2*횟수+1)], 색)
		횟수 -> 횟수 + 1
		
################
겹친다?(종류, 회전, 세로, 가로) 정의
	겹침 -> 0
	
	시작위치 -> 10000+(종류*100)+(회전*10)
	세로위치 -> 세로
	가로위치 -> 가로
	
	횟수 -> 0
	(겹침=0) * (횟수 < 4) 동안
		세로위치 -> 세로+메모리[시작위치+(2*횟수)]
		가로위치 -> 가로+메모리[시작위치+(2*횟수+1)]
		
		(세로위치<0) + (세로위치>=19) + (가로위치<1) + (가로위치>10) 이면
			겹침 -> 1
		(겹침=0) * (메모리[20000+(세로위치*100)+가로위치]>0) 이면
			겹침 -> 1
		횟수 -> 횟수 + 1
		
	출력 -> 겹침
	
###################
줄지우기() 정의
	줄수 -> 0
	세로 -> 18
	세로 >= 0 동안
		완성 -> 1
		가로 -> 1
		(완성 = 1) * (가로 < 11) 동안
			메모리[20000+(세로*100)+가로] = 0 이면
				완성 -> 0
			가로 -> 가로 + 1
		
		완성=1 이면
			### 점수 표시
			/*
			점수 -> 메모리[20]
			메모리[62560 + ((점수/40)*100) + (점수 - ((점수/40)*40))] -> 9999
			메모리[20] -> 점수 + 1
			*/
			줄수 -> 줄수 + 1
			
			### 한줄 지우기 애니메이션
			횟수 -> 0
			횟수 < 10 동안
				사각형(세로, 횟수+1, 0)
				메모리[55000] -> 1
				횟수 -> 횟수 + 1
			
			### 데이터 내리기
			세로위치 -> 세로
			세로위치 > 0 동안
				가로위치 -> 1
				가로위치 < 11 동안
					메모리[20000+(세로위치*100)+가로위치] -> 메모리[20000+((세로위치-1)*100)+가로위치]
					가로위치 -> 가로위치 + 1
				세로위치 -> 세로위치 - 1
				
			### 첫줄을 0 으로 채운다
			횟수 -> 0
			횟수 < 10 동안
				메모리[20000+횟수+1] -> 0
				횟수 -> 횟수 + 1
				
			### 판을 다시 그린다
			세로위치 -> 0
			세로위치 < 19 동안
				가로위치 -> 1
				가로위치 < 11 동안
					사각형(세로위치,가로위치,메모리[20000+(세로위치*100)+가로위치])
					가로위치 -> 가로위치 + 1
				세로위치 -> 세로위치 + 1
				
			메모리[55000] -> 1
				
		완성=0 이면
			세로 -> 세로 - 1
			
	# 점수 표시
	줄수 > 0 이면
		점수 -> 메모리[20]
		추가점수 -> 줄수*10-9
		횟수 -> 0
		횟수 < 추가점수 동안
			메모리[62560 + (((점수+횟수)/40)*100) + ((점수+횟수) - (((점수+횟수)/40)*40))] -> 9999
			횟수 -> 횟수 + 1
		메모리[20] -> 점수 + 추가점수

###########
새블록() 정의	
	시드 -> 랜덤(메모리[30])
	메모리[30] -> 시드
	출력 -> 나머지(시드,7)

#############
나머지(값, 분모) 정의
	출력 -> 값 - ((값/분모)*분모)
	
##########
랜덤(시드) 정의
	시드 = 0 이면
		시드 -> 1
	출력 -> 나머지(2043 * 시드, 1048573)